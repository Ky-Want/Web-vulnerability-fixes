/*
Vulnerability: SQL Injection

Description:
Some web development practices use a dictionary of banned words (blacklists) as an SQL injection prevention, but I've heard that, that is poor practice in most cases since most of the words in the blacklist (e.g., delete, select, or drop) could be used in common language.
With that in mind I looked into a different way to code defensively and prevent SQL injection attacks. I noticed many articles indicating the only proven way to protect a website from SQL injection attacks is to use SQL protection parameters. These are custom values, added to SQL query at the time of execution. In an SQL statement, the SQL protection parameters are defined by an @ marker.

Some additional tips I found useful:
The most basic SQL injections can be prevented by filtering input. However, it will not stop more complex attacks.
To prevent maximum SQL injection damage, it is recommended to separate your sensitive data and store it in multiple databases.
Customize your error messages so they don't give away any information about the structure of your database to a potential intruder.



Code Fixes: 
The examples below are how I would set up SQL injection protection parameters in ASP.NET and PHP:
  txt_user_id = getRequestString("user_id");
  sql = "SELECT * FROM customers WHERE customer_id = @0";
  command = new SqlCommand(sql);
  command.Parameters.AddWithValue("@0",txt_user_id);
  command.ExecuteReader();

Now here is an example of how I'd use the INSERT INTO statement in ASP.NET:
  txt_nam = getRequestString("company_name");
  txt_psc = getRequestString("passcode");
  txt_add = getRequestString("address");
  txt_sql = "INSERT INTO customers (company_name,passcode,address) Values(@0,@1,@2)";
  command = new SqlCommand(txt_sql);
  command.Parameters.AddWithValue("@0",txt_nam);
  command.Parameters.AddWithValue("@1",txt_psc);
  command.Parameters.AddWithValue("@2",txt_add);
  command.ExecuteNonQuery();

Finally, this last example is how I would use an INSERT INTO statement in PHP:
  $stmt = $dbh ->
  prepare ("INSERT INTO Customers (CompanyName,Passcode,Address) VALUES (:nam, :psc, :add)");
  $stmt->bindParam(':nam', $txtNam);
  $stmt->bindParam(':psc', $txtPsc);
  $stmt->bindParam(':add', $txtAdd);
  $stmt->execute();
*/