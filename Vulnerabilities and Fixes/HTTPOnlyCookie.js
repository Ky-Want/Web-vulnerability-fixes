/*
Vulnerability: HTTPOnly Cookie

Description:
Vulnerabilities in Web Application Cookies Lack HttpOnly Flag is a Medium risk vulnerability that is one of the most frequently found on networks around the world. This issue has been around since at least 1990 but has proven either difficult to detect, difficult to resolve or prone to being overlooked entirely.

The modern web relies a lot on cookies. However, we are not talking about sweet pieces of pastry you can eat. Instead, cookies are pieces of information a website stores on the user’s device. If you have a website, you can mark a cookie to be an HttpOnly Cookie. If you want to know what does this means or why should you use this type of cookie, you are in the right place.

Before we can explain what is an HttpOnly Cookie, we should clarify what a traditional cookie is.
A cookie is a piece of text that a website tells your PC to store for later use. Remember that a website can only suggest that to your browser (e.g. Chrome, Firefox), but it cannot force the cookie to be saved. Instead, it is the browser deciding if it should accept cookies or not, and you can configure that in any modern browser. However, browsers accept cookies by default because the web heavily relies on them.
A cookie doesn’t simply mean saving some piece of data in your browser. It also means sending that piece of data in every request to the site that created the cookie. This becomes pretty useful, for example for authentication. With a cookie, you can store a token that identifies the user. Then, every time the browser makes a request to your site, it will send the authentication token. Now, on your web server, you can recognize users by their token (their cookie).

HttpOnly is a flag the website can specify about a cookie. In other words, the webserver tells your browser “Hey, here is a cookie, and you should treat is as HttpOnly”.
An HttpOnly Cookie is not accessible by the JavaScript. Only the browser knows about it, and it doesn’t give it to the JavaScript code in the page. At first, it might sound like a limitation, and it is. However, the goal of that is that we cannot trust the JavaScript code. An attacker may use JavaScript to steal our authentication token stored in a cookie, and then access the website with our account. With HttpOnly cookies, this is not possible. This makes XSS attacks (the one we just described) harder to perform.
It is a recognized best practice to share any authentication data only with HttpOnly cookies. Using a standard cookie for authentication is a known vulnerability we should avoid in any case.


In the end, cookies are a property of HTTP. HTTP is a standard protocol that defines how to send and receive cookies. Luckily, the instructions of HTTP are in plain text. To set a cookie as HttpOnly, the instruction to use in the header is the following.

Set-Cookie: =[; =][; expires=][; domain=][; path=][; secure][; HttpOnly]

If you are not familiar with this syntax, it provides several options. One of them is HttpOnly, and we should add in our case. The simplest way to make an HttpOnly Cookie is thus the following.

Set-Cookie: cookie_name="cookie_value"; HttpOnly

Of course, creating cookies from a programming language you will not have to write HTTP headers manually. You will have a dedicated function to create cookies, check the documentation of your programming language.


As we said in the beginning, cookies are suggestions the website tells to your browser. In the end, is the browser to decide whether to accept a cookie or not. Like so, it is also the browser to decide to provide the cookie to JavaScript or not. To put it simply, when you make an HttpOnly Cookie, you are telling the browser “Please, don’t show that to JavaScript”. Thus, trust HttpOnly cookies blindly. Most importantly, don’t use to store sensitive data like credentials or passwords: use only tokens.
However, be aware that all modern browsers implement HttpOnly cookies. In fact, Internet Explorer 6 started to support them in 2002. Even today, this technology is still relevant.

In conclusion HttpOnly Cookies are Cookies that are not available to JavaScript. Thus, they are the best choice for storing session tokens. To implement them, you should check the reference of your programming language, but in general, it is as simple as adding an additional parameter to a function.
If you want to make your web application more secure, making sessions based on an HttpOnly cookie is a good start.  What to do next? A good start could be reading some articles of the Open Web Application Security Project, which dictates some of the best practices in the field.



Fixes:
Scanning For and Finding Vulnerabilities in Web Application Cookies Lack HttpOnly Flag
Use of Vulnerability Management tools, like AVDS, are standard practice for the discovery of this vulnerability. The primary failure of VA in finding this vulnerability is related to setting the proper scope and frequency of network scans. It is vital that the broadest range of hosts (active IPs) possible are scanned and that scanning is done frequently. We recommend weekly. Your existing scanning solution or set of test tools should make this not just possible, but easy and affordable. If that is not the case, please consider AVDS.

Penetration Testing (pentest) for this Vulnerability
The Vulnerabilities in Web Application Cookies Lack HttpOnly Flag is prone to false positive reports by most vulnerability assessment solutions. AVDS is alone in using behavior based testing that eliminates this issue. For all other VA tools security consultants will recommend confirmation by direct observation. In any case Penetration testing procedures for discovery of Vulnerabilities in Web Application Cookies Lack HttpOnly Flag produces the highest discovery accuracy rate, but the infrequency of this expensive form of testing degrades its value. The ideal would be to have pentesting accuracy and the frequency and scope possibilities of VA solutions, and this is accomplished only by AVDS.

Security Updates on Vulnerabilities in Web Application Cookies Lack HttpOnly Flag
Given that this is one of the most frequently found vulnerabilities, there is ample information regarding mitigation online and very good reason to get it fixed. Hackers are also aware that this is a frequently found vulnerability and so its discovery and repair is that much more important. It is so well known and common that any network that has it present and unmitigated indicates “low hanging fruit” to attackers.

Disclosures related to this vulnerability
https://www.owasp.org/index.php/Session_Management_Cheat_Sheet

Confirming the Presence of Vulnerabilities in Web Application Cookies Lack HttpOnly Flag
AVDS is currently testing for and finding this vulnerability with zero false positives. If your current set of tools is indicating that it is present but you think it is probably a false positive, please contact us for a demonstration of AVDS.

False positive/negatives
The secret killer of VA solution value is the false positive. There was an industry wide race to find the most vulnerabilities, including Vulnerabilities in Web Application Cookies Lack HttpOnly Flag ,and this resulted in benefit to poorly written tests that beef up scan reports by adding a high percentage of uncertainty. This may have sold a lot of systems some years ago, but it also stuck almost all VA solutions with deliberately inaccurate reporting that adds time to repairs that no administrator can afford. Beyond Security did not participate in this race to mutually assured destruction of the industry and to this day produces the most accurate and actionable reports available.

Patching/Repairing this Vulnerability
https://www.sparkred.com/blog/how-to-fix-httponly-vulnerability-in-oracle-atg-commerce-applications/

Vulnerabilities in Web Application Cookies Lack HttpOnly Flag is a Medium risk vulnerability that is also high frequency and high visibility. This is the most severe combination of security factors that exists and it is extremely important to find it on your network and fix it as soon as possible.
*/